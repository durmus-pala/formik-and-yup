{"version":3,"sources":["assets/rocket.png","components/TextField.js","components/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["TextField","label","props","useField","field","meta","console","log","className","htmlFor","name","touched","error","id","autoComplete","component","Signup","validate","Yup","firstName","min","max","required","lastName","email","password","matches","test","value","confirmPassword","oneOf","aggreeToTerms","initialValues","agreeToTerms","validationSchema","onSubmit","values","alert","JSON","stringify","formik","type","App","src","rocketImg","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAAe,G,YAAA,IAA0B,oC,8CCE5BA,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,EAAY,2BAC1BC,YAASD,GADiB,mBACzCE,EADyC,KAClCC,EADkC,KAGhD,OADAC,QAAQC,IAAI,CAAEH,QAAOC,SAEnB,sBAAKG,UAAU,OAAf,UACE,wBAAOC,QAASL,EAAMM,KAAtB,cAA8BT,KAC9B,2DACEO,UAAS,mCACPH,EAAKM,SAAWN,EAAKO,OAAS,cAEhCC,GAAIT,EAAMM,MACNN,GACAF,GANN,IAOEY,aAAa,SAEf,cAAC,IAAD,CAAcC,UAAU,MAAML,KAAMN,EAAMM,KAAMF,UAAU,cCbnDQ,EAAS,WACpB,IASMC,EAAWC,IAAW,CAC1BC,UAAWD,MACRE,IAAI,EAAG,aACPC,IAAI,GAAI,uBACRC,SAAS,YAEZC,SAAUL,MACPE,IAAI,EAAG,aACPC,IAAI,GAAI,uBACRC,SAAS,YAEZE,MAAON,MAAaM,MAAM,oBAAoBF,SAAS,YAEvDG,SAAUP,MACPE,IAAI,EAAG,4CACPM,QAAQ,MAAO,+BACfA,QAAQ,SAAU,kCAClBA,QAAQ,SAAU,kCAClBA,QAAQ,oBAAqB,qCAC7BC,KAAK,WAAY,0BAA0B,SAACC,GAAD,OAAY,MAAMD,KAAKC,MAClEN,SAAS,YAEZO,gBAAiBX,MACdY,MAAM,CAACZ,IAAQ,YAAa,MAAO,uBACnCI,SAAS,mCAEZS,cAAeb,MACZjB,MAAM,SACN0B,KACC,gBACA,mCACA,SAACC,GAAD,OAAqB,IAAVA,OAGjB,OACE,cAAC,IAAD,CACEI,cA7CkB,CACpBb,UAAW,GACXI,SAAU,GACVC,MAAO,GACPC,SAAU,GACVI,gBAAiB,GACjBI,cAAc,GAwCZC,iBAAkBjB,EAClBkB,SAAU,SAACC,GACTC,MAAMC,KAAKC,UAAUH,EAAQ,KAAM,KAJvC,SAOG,SAACI,GAAD,OACC,gCACE,oBAAIhC,UAAU,kCAAd,qBACA,eAAC,IAAD,WACE,cAAC,EAAD,CAAWP,MAAM,aAAaS,KAAK,YAAY+B,KAAK,SACpD,cAAC,EAAD,CAAWxC,MAAM,YAAYS,KAAK,WAAW+B,KAAK,SAClD,cAAC,EAAD,CAAWxC,MAAM,QAAQS,KAAK,QAAQ+B,KAAK,UAC3C,cAAC,EAAD,CAAWxC,MAAM,WAAWS,KAAK,WAAW+B,KAAK,aACjD,cAAC,EAAD,CACExC,MAAM,mBACNS,KAAK,kBACL+B,KAAK,aAEP,cAAC,EAAD,CACExC,MAAM,8BACNS,KAAK,gBACL+B,KAAK,aAEP,wBAAQjC,UAAU,oBAAlB,sBACA,wBAAQA,UAAU,2BAAlB,6BCxDGkC,MAff,WACE,OACE,qBAAKlC,UAAU,iBAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,kBAAkBmC,IAAKC,EAAWC,IAAI,aCAhDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c09aa680.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rocket.4bf2b4a8.png\";","import { useField, ErrorMessage } from \"formik\";\r\n\r\nexport const TextField = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  console.log({ field, meta });\r\n  return (\r\n    <div className=\"mb-2\">\r\n      <label htmlFor={field.name}> {label}</label>\r\n      <input\r\n        className={`form-control shadow-none ${\r\n          meta.touched && meta.error && \"is-invalid\"\r\n        }`}\r\n        id={field.name}\r\n        {...field}\r\n        {...props}\r\n        autoComplete=\"off\"\r\n      />\r\n      <ErrorMessage component=\"div\" name={field.name} className=\"error\" />\r\n    </div>\r\n  );\r\n};\r\n","import { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"./TextField\";\r\n\r\nexport const Signup = () => {\r\n  const initialValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    agreeToTerms: false,\r\n  };\r\n\r\n  const validate = Yup.object({\r\n    firstName: Yup.string()\r\n      .min(2, \"Too short\")\r\n      .max(15, \"Must be max 15 char\")\r\n      .required(\"Required\"),\r\n\r\n    lastName: Yup.string()\r\n      .min(2, \"Too short\")\r\n      .max(25, \"Must be max 15 char\")\r\n      .required(\"Required\"),\r\n\r\n    email: Yup.string().email(\"Email is invalid\").required(\"Required\"),\r\n\r\n    password: Yup.string()\r\n      .min(8, \"Password must be at least 8 char or more\")\r\n      .matches(/\\d+/, \"Password must have a number\")\r\n      .matches(/[a-z]+/, \"Password must have a lowercase\")\r\n      .matches(/[A-Z]+/, \"Password must have a uppercase\")\r\n      .matches(/[!?.@#$%^&*()-+]+/, \"Password must have a special char\")\r\n      .test(\"Password\", \"Password is an invalid\", (value) => !/\\s+/.test(value))\r\n      .required(\"Required\"),\r\n\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref(\"password\"), null], \"Password must match\")\r\n      .required(\"Confirming password is required\"),\r\n\r\n    aggreeToTerms: Yup.boolean()\r\n      .label(\"Terms\")\r\n      .test(\r\n        \"aggreeToTerms\",\r\n        \"Must agree to terms to continue\",\r\n        (value) => value === true\r\n      ),\r\n  });\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validate}\r\n      onSubmit={(values) => {\r\n        alert(JSON.stringify(values, null, 2));\r\n      }}\r\n    >\r\n      {(formik) => (\r\n        <div>\r\n          <h1 className=\"my-4 font-weight-bold-display-4\">Sign Up</h1>\r\n          <Form>\r\n            <TextField label=\"First Name\" name=\"firstName\" type=\"text\" />\r\n            <TextField label=\"Last Name\" name=\"lastName\" type=\"text\" />\r\n            <TextField label=\"Email\" name=\"email\" type=\"email\" />\r\n            <TextField label=\"Password\" name=\"password\" type=\"password\" />\r\n            <TextField\r\n              label=\"Confirm Password\"\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n            />\r\n            <TextField\r\n              label=\"I accept terms & conditions\"\r\n              name=\"aggreeToTerms\"\r\n              type=\"checkbox\"\r\n            />\r\n            <button className=\"btn btn-dark mt-3\">Register</button>\r\n            <button className=\"btn btn-danger mt-3 ml-3\">Reset</button>\r\n          </Form>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport rocketImg from \"./assets/rocket.png\";\nimport { Signup } from \"./components/Signup\";\n\nfunction App() {\n  return (\n    <div className=\"container mt-3\">\n      <div className=\"row\">\n        <div className=\"col-md-5\">\n          <Signup />\n        </div>\n        <div className=\"col-md-7 my-auto\">\n          <img className=\"img-fluid w-100\" src={rocketImg} alt=\"\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}